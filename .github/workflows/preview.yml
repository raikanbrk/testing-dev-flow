name: Ephemeral Preview Environment

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

env:
  PR_NUMBER: ${{ github.event.pull_request.number }}

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository && github.event.action != 'closed'
    outputs:
      image_tag: ${{ steps.meta.outputs.version }}
    steps:
      - name: Set dynamic variables
        run: echo "PROJECT_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ github.repository }}
          tags: |
            type=raw,value=pr-${{ env.PR_NUMBER }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: php
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            br.com.carlosalexandre.preview.pr=${{ env.PR_NUMBER }}
            br.com.carlosalexandre.preview.general=true
          build-args: |
            COMPOSER_CACHE_KEY=${{ hashFiles('composer.lock') }}
            NPM_CACHE_KEY=${{ hashFiles('package-lock.json') }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy_preview:
    needs: build_and_push
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository && github.event.action != 'closed'
    environment:
      name: Preview
    permissions:
      pull-requests: write
    steps:
      - name: Set dynamic variables
        run: |
          echo "PROJECT_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
          echo "PROJECT_DIR=/var/www/previews-prs/${GITHUB_REPOSITORY#*/}/pr-${{ env.PR_NUMBER }}" >> $GITHUB_ENV

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            export PR_NUMBER=${{ env.PR_NUMBER }}
            export PROJECT_NAME=${{ env.PROJECT_NAME }}
            export IMAGE_TAG=${{ needs.build_and_push.outputs.image_tag }}
            export REPO_FULL_NAME=${{ github.repository }}
            export COMMIT_SHA=${{ github.event.pull_request.head.sha }}
            export PROJECT_DIR="${{ env.PROJECT_DIR }}"
            export FIRST_TIME=false

            if [ ! -d "$PROJECT_DIR" ]; then
              FIRST_TIME=true
              echo "Clonando repositório pela primeira vez em ${PROJECT_DIR}..."
              git clone "git@github.com:${REPO_FULL_NAME}.git" "${PROJECT_DIR}"
              cd "${PROJECT_DIR}"

              git fetch origin
              git checkout "${COMMIT_SHA}"
            fi

            bash $PROJECT_DIR/docker/preview/deploy-preview.sh

      - name: Post Preview URL to PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          number: ${{ env.PR_NUMBER }}
          header: preview-url
          message: |
            ✅ **Preview pronto!**
            Acesse em: https://${{ env.PROJECT_NAME }}-pr-${{ env.PR_NUMBER }}.preview.carlosalexandre.com.br

            > Imagem: `${{ github.repository }}:${{ needs.build_and_push.outputs.image_tag }}`

  destroy_preview:
    if: github.event.action == 'closed' && github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest
    environment:
      name: Preview
    permissions:
      contents: read
    steps:
      - name: Set dynamic variables
        run: |
          echo "PROJECT_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
          echo "PROJECT_DIR=/var/www/previews-prs/${GITHUB_REPOSITORY#*/}/pr-${{ env.PR_NUMBER }}" >> $GITHUB_ENV

      - name: Destroy Environment on VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            export PR_NUMBER=${{ env.PR_NUMBER }}
            export PROJECT_NAME=${{ env.PROJECT_NAME }}
            export PROJECT_DIR="${{ env.PROJECT_DIR }}"
            if [ -d "$PROJECT_DIR" ]; then
              cat $PROJECT_DIR/docker/preview/destroy-preview.sh | bash -s
            else
              echo "Diretório do projeto não encontrado. Nada a fazer."
            fi

      - name: Install and Login to regctl
        run: |
          curl -L https://github.com/regclient/regclient/releases/latest/download/regctl-linux-amd64 -o /usr/local/bin/regctl
          chmod +x /usr/local/bin/regctl
          regctl registry login docker.io -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"

      - name: Delete PR-prefixed tag from Docker Hub
        run: |
          REPO="docker.io/${{ github.repository }}"
          PR_TAG="pr-${{ env.PR_NUMBER }}"
          echo "Removendo tag da PR: ${PR_TAG}"
          regctl tag rm "${REPO}:${PR_TAG}" || echo "Tag ${PR_TAG} não encontrada."
