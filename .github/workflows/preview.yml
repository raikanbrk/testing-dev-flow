name: Ephemeral Preview Environment

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository && github.event.action != 'closed'
    outputs:
      image_tag: ${{ steps.meta.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: devc4rlos/testing-dev-flow
          tags: |
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: php
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            br.com.carlosalexandre.preview.pr=${{ github.event.pull_request.number }}
            br.com.carlosalexandre.preview.general=true

  deploy_preview:
    needs: build_and_push
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository && github.event.action != 'closed'
    permissions:
      pull-requests: write
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            PR_NUMBER=${{ github.event.pull_request.number }}
            IMAGE_TAG=${{ needs.build_and_push.outputs.image_tag }}
            PROJECT_DIR="/var/www/previews-prs/testing-dev-flow/pr-${PR_NUMBER}"

            export HOSTNAME="testing-dev-flow-pr-${PR_NUMBER}.preview.carlosalexandre.com.br"
            export ROUTER_NAME="testing-dev-flow-pr-${PR_NUMBER}"
            export SERVICE_NAME="testing-dev-flow-pr-${PR_NUMBER}"
            export IMAGE_TAG

            if [ ! -d "$PROJECT_DIR/.git" ]; then
              git clone git@github.com:${{ github.repository }}.git ${PROJECT_DIR}
              cd ${PROJECT_DIR}

              ln -s ~/.env ./.env
              ln -s ~/.htpasswd ./docker/nginx/.htpasswd
            else
              cd ${PROJECT_DIR}
              docker compose -p ${SERVICE_NAME} down -v
            fi

            git fetch origin
            git checkout ${{ github.event.pull_request.head.sha }}

            docker compose -f docker-compose.preview.yml -p ${SERVICE_NAME} up -d

            echo "Aguardando o banco de dados ficar pronto..."
            TIMEOUT=60
            while ! docker compose -p ${SERVICE_NAME} exec -T mysql mysqladmin ping --silent; do
              sleep 1
              TIMEOUT=$((TIMEOUT-1))
              if [ $TIMEOUT -le 0 ]; then
                echo "Erro: O banco de dados não ficou pronto a tempo."
                exit 1
              fi
            done
            echo "Banco de dados pronto!"

            docker compose -p ${SERVICE_NAME} exec -T app php artisan migrate --force

      - name: Post Preview URL to PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          number: ${{ github.event.pull_request.number }}
          header: preview-url
          message: |
            ✅ **Preview pronto!**
            Acesse em: https://testing-dev-flow-pr-${{ github.event.pull_request.number }}.preview.carlosalexandre.com.br

            > Imagem: `devc4rlos/testing-dev-flow:${{ needs.build_and_push.outputs.image_tag }}`

  destroy_preview:
    if: github.event.action == 'closed' && github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest
    steps:
      - name: Destroy Environment on VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            PR_NUMBER=${{ github.event.pull_request.number }}
            PROJECT_DIR="/var/www/previews-prs/testing-dev-flow/pr-${PR_NUMBER}"
            SERVICE_NAME="testing-dev-flow-pr-${PR_NUMBER}"

            echo "Limpando ambiente da PR #${PR_NUMBER}..."

            if [ -d "$PROJECT_DIR" ]; then
              cd ${PROJECT_DIR}
              docker compose -p ${SERVICE_NAME} down -v
              cd ..
              rm -rf ${PROJECT_DIR}
            fi

            echo "Removendo imagens do servidor para a PR #${PR_NUMBER}..."
            IMAGES_TO_DELETE=$(docker images -q --filter "label=br.com.carlosalexandre.preview.pr=${PR_NUMBER}")
            if [ -n "$IMAGES_TO_DELETE" ]; then
              docker rmi $IMAGES_TO_DELETE || true
            else
              echo "Nenhuma imagem encontrada para a PR #${PR_NUMBER}."
            fi

      - name: Install and Login to regctl
        run: |
          curl -L https://github.com/regclient/regclient/releases/latest/download/regctl-linux-amd64 -o /usr/local/bin/regctl
          chmod +x /usr/local/bin/regctl
          regctl registry login docker.io -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"

      - name: Delete All Image Tags from Docker Hub for this PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Buscando commits para a PR #${{ github.event.pull_request.number }}..."

          COMMIT_SHAS=$(gh pr view ${{ github.event.pull_request.number }} --json commits -q '.commits.[].oid')

          for sha in $COMMIT_SHAS; do
            short_sha=$(echo "$sha" | cut -c1-7)
            IMAGE_TAG="sha-${short_sha}"
            echo "Tentando remover a imagem devc4rlos/testing-dev-flow:${IMAGE_TAG} do Docker Hub..."
            regctl tag rm docker.io/devc4rlos/testing-dev-flow:${IMAGE_TAG} || echo "Tag ${IMAGE_TAG} não encontrada ou já removida."
          done
